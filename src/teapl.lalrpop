use std::str::FromStr;
use crate::ast;

grammar;

pub Program: Box<ast::Program> = {
    ProgramElementList => Box::new(ast::Program{elements: <>})
};

ProgramElementList: Box<ast::ProgramElementList> = {
    <pe: ProgramElement> <pl: ProgramElementList> => Box::new(
        ast::ProgramElementList {
            element: pe,
            next: pl
        }
    )
}

ProgramElement: Box<ast::ProgramElement> = {
    VarDeclStmt => Box::new(
        ast::ProgramElement {
            inner: ast::ProgramElementInner::VarDecl(<>)
        }
    ),
    StructDef => Box::new(
        ast::ProgramElement {
            inner: ast::ProgramElementInner::StructDef(<>)
        }
    ),
    FnDecl => Box::new(
        ast::ProgramElement {
            inner: ast::ProgramElementInner::FnDeclStmt(<>)
        }
    )
    FnDef => Box::new(
        ast::ProgramElement {
            inner: ast::ProgramElementInner::FnDef(<>)
        }
    )
}

StructDef: Box<ast::StructDef> = {
    <begin: @L> Struct <id: Identifier> LCurlyBrace <vdl: VarDeclList> RCurlyBrace =>  Box::new(
        ast::StructDef {
            pos: begin,
            id: String::from(id),
            decls: vdl,
        }
    )
}

ExprUnit: Box<ast::ExprUnit> = {
    <begin: @L> <num: Num> => Box::new(
        ast::ExprUnit {
            pos: begin,
            inner: ast::ExprUnitInner::Num(num)
        }
    ),
    <begin: @L> <id: Identifier> => Box::new(
        ast::ExprUnit {
            pos: begin,
            inner: ast::ExprUnitInner::Id(String::from(id))
        }
    ),
    <begin: @L> LParentheses <ae: ArithExpr> RParentheses => Box::new(
        ast::ExprUnit {
            pos: begin,
            inner: ast::ExprUnitInner::ArithExpr(ae)
        }
    ),
    <begin: @L> <fc: FnCall> => Box::new(
        ast::ExprUnit {
            pos: begin,
            inner: ast::ExprUnitInner::FnCall(fc)
        }
    ),
    <begin: @L> <ae: ArrayExpr> => Box::new(
        ast::ExprUnit {
            pos: begin,
            inner: ast::ExprUnitInner::ArrayExpr(ae)
        }
    ),
    <begin: @L> <lv: LeftVal> Dot <id: Identifier> => Box::new(
        ast::ExprUnit {
            pos: begin,
            inner: ast::ExprUnitInner::MemberExpr(
                pos: begin,
                id: String::from(lv->inner as LeftValInner::Id),
                member_id: String::from(id)
            )
        }
    )
}

Num: i32 = {
    "0" => 0,
    <s:r"[1-9][0-9]*"> => i32::from_str(s).unwrap(),
};

Identifier = r"[a-zA-Z_][a-zA-Z0-9_]*";

Add = "+";
Sub = "-";
Mul = "*";
Div = "/";
Let = "let";
Colon = ":";
Semicolon = ";";
Assignment = "=";
Fn = "fn";
LCurlyBrace = "{";
RCurlyBrace = "}";
RArrow = "->";
LSquareBracket = "[";
RSquareBracket = "]";
Dot = ".";
LParentheses = "(";
RParentheses = ")";
Comma = ",";
Break = "break";
Continue = "continue";
Return = "ret";
If = "if";
Else = "else";
While = "while";
And = "&&";
Or = "||";
Not = "!";
Equal = "==";
NotEqual = "!=";
LessThan = "<";
GreaterThan = ">";
LessEqual = "<=";
GreaterEqual = ">=";
Struct = "struct";
Int = "int";
